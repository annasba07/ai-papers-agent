import { NextResponse } from 'next/server';import { parseStringPromise } from 'xml2js';import { GoogleGenerativeAI } from '@google/generative-ai';const API_KEY = process.env.GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY';const genAI = new GoogleGenerativeAI(API_KEY);async function generateTrendAnalysis(papers: { title: string; summary: string }[]): Promise<string> {  try {    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });    const prompt = `      As an expert AI research analyst, your task is to identify high-level trends from a list of recent research paper titles and summaries.      Based on the provided list of papers, please generate a concise report that covers the following points:      1.  **Key Themes:** Identify 2-4 dominant themes or sub-fields that are emerging or highly active.      2.  **Common Techniques:** What are the most frequently mentioned models, architectures, or methods?      3.  **Overall Summary:** Provide a brief, high-level narrative of the current research direction in this area based on the papers.      Here are the papers:      ${papers.map((p) => `
- Title: ${p.title}
  Summary: ${p.summary}`).join('')}      **Trend Analysis Report:**    `;    const result = await model.generateContent(prompt);    const response = await result.response;    return response.text();  } catch (error) {    console.error('Error generating trend analysis:', error);    return 'Could not generate trend analysis.';  }}export async function GET(request: Request) {  const { searchParams } = new URL(request.url);  const category = searchParams.get('category') || 'all';  let searchQuery = '';  if (category === 'all') {    searchQuery = 'cat:cs.AI OR cat:cs.LG OR cat:cs.CV OR cat:cs.CL';  } else {    searchQuery = `cat:${category}`;  }  const arxivApiUrl = `http://export.arxiv.org/api/query?search_query=${searchQuery}&sortBy=submittedDate&sortOrder=descending&max_results=50`;  try {    const response = await fetch(arxivApiUrl);    if (!response.ok) {      throw new Error(`arXiv API returned status ${response.status}`);    }    const xmlText = await response.text();    const result = await parseStringPromise(xmlText);    const entries = result.feed.entry || [];    const papers = entries.map((entry: any) => ({      title: entry.title[0],      summary: entry.summary[0],    }));    if (papers.length === 0) {      return NextResponse.json({ trendAnalysis: 'No papers found to analyze.' });    }    const trendAnalysis = await generateTrendAnalysis(papers);    return NextResponse.json({ trendAnalysis });  } catch (error: any) {    console.error('Error fetching papers for trend analysis:', error.message, error.stack);    return NextResponse.json({ error: 'Failed to fetch papers for analysis', details: error.message }, { status: 500 });  }}